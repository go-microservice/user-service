// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-eagle/eagle/pkg/app"
	"github.com/go-eagle/eagle/pkg/client/consulclient"
	"github.com/go-eagle/eagle/pkg/client/etcdclient"
	"github.com/go-eagle/eagle/pkg/client/nacosclient"
	"github.com/go-eagle/eagle/pkg/log"
	"github.com/go-eagle/eagle/pkg/redis"
	"github.com/go-eagle/eagle/pkg/registry"
	"github.com/go-eagle/eagle/pkg/registry/consul"
	"github.com/go-eagle/eagle/pkg/registry/etcd"
	"github.com/go-eagle/eagle/pkg/registry/nacos"
	"github.com/go-eagle/eagle/pkg/transport/grpc"
	"github.com/go-microservice/user-service/internal/cache"
	"github.com/go-microservice/user-service/internal/model"
	"github.com/go-microservice/user-service/internal/repository"
	"github.com/go-microservice/user-service/internal/server"
	"github.com/go-microservice/user-service/internal/service"
	log2 "log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

func InitApp(cfg *app.Config, config *app.ServerConfig) (*app.App, func(), error) {
	db, cleanup, err := model.Init()
	if err != nil {
		return nil, nil, err
	}
	client, cleanup2, err := redis.Init()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userCache := cache.NewUserCache(client)
	userRepo := repository.NewUser(db, userCache)
	userServiceServer := service.NewUserServiceServer(userRepo)
	grpcServer := server.NewGRPCServer(config, userServiceServer)
	appApp := newApp(cfg, grpcServer)
	return appApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newApp(cfg *app.Config, gs *grpc.Server) *app.App {
	return app.New(app.WithName(cfg.Name), app.WithVersion(cfg.Version), app.WithLogger(log.GetLogger()), app.WithServer(server.NewHTTPServer(&cfg.HTTP), gs), app.WithRegistry(getConsulRegistry()),
	)
}

// create a etcd register
func getEtcdRegistry() registry.Registry {
	client, err := etcdclient.New()
	if err != nil {
		log2.Fatal(err)
	}
	return etcd.New(client.Client)
}

// create a consul register
func getConsulRegistry() registry.Registry {
	client, err := consulclient.New()
	if err != nil {
		panic(err)
	}
	return consul.New(client)
}

// create a nacos register
func getNacosRegistry() registry.Registry {
	client, err := nacosclient.New()
	if err != nil {
		panic(err)
	}
	return nacos.New(client)
}
