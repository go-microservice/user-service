// Code generated by MockGen. DO NOT EDIT.
// Source: user_cache.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/go-microservice/user-service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// DelUserCache mocks base method.
func (m *MockUserCache) DelUserCache(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUserCache", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUserCache indicates an expected call of DelUserCache.
func (mr *MockUserCacheMockRecorder) DelUserCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUserCache", reflect.TypeOf((*MockUserCache)(nil).DelUserCache), ctx, id)
}

// GetUserCache mocks base method.
func (m *MockUserCache) GetUserCache(ctx context.Context, id int64) (*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCache", ctx, id)
	ret0, _ := ret[0].(*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCache indicates an expected call of GetUserCache.
func (mr *MockUserCacheMockRecorder) GetUserCache(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCache", reflect.TypeOf((*MockUserCache)(nil).GetUserCache), ctx, id)
}

// MultiGetUserCache mocks base method.
func (m *MockUserCache) MultiGetUserCache(ctx context.Context, ids []int64) (map[string]*model.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetUserCache", ctx, ids)
	ret0, _ := ret[0].(map[string]*model.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetUserCache indicates an expected call of MultiGetUserCache.
func (mr *MockUserCacheMockRecorder) MultiGetUserCache(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetUserCache", reflect.TypeOf((*MockUserCache)(nil).MultiGetUserCache), ctx, ids)
}

// MultiSetUserCache mocks base method.
func (m *MockUserCache) MultiSetUserCache(ctx context.Context, data []*model.UserModel, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiSetUserCache", ctx, data, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// MultiSetUserCache indicates an expected call of MultiSetUserCache.
func (mr *MockUserCacheMockRecorder) MultiSetUserCache(ctx, data, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiSetUserCache", reflect.TypeOf((*MockUserCache)(nil).MultiSetUserCache), ctx, data, duration)
}

// SetCacheWithNotFound mocks base method.
func (m *MockUserCache) SetCacheWithNotFound(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCacheWithNotFound", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCacheWithNotFound indicates an expected call of SetCacheWithNotFound.
func (mr *MockUserCacheMockRecorder) SetCacheWithNotFound(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheWithNotFound", reflect.TypeOf((*MockUserCache)(nil).SetCacheWithNotFound), ctx, id)
}

// SetUserCache mocks base method.
func (m *MockUserCache) SetUserCache(ctx context.Context, id int64, data *model.UserModel, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserCache", ctx, id, data, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserCache indicates an expected call of SetUserCache.
func (mr *MockUserCacheMockRecorder) SetUserCache(ctx, id, data, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserCache", reflect.TypeOf((*MockUserCache)(nil).SetUserCache), ctx, id, data, duration)
}
